<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

		<!-- @Component, @Service, @Repository, @Controller 애노테이션이 붙은
		     클래스의 객체를 자동 생성하려면 그런 일을 처리해주는 객체를 등록해야 한다.
		     => 다음 태그가 그런 객체를 등록하는 역할을 한다.
		     
		     이 애노테이션을 사용하여 객체를 생성하면 그 객체의 이름은 무엇인가?
		     => 패키지명을 제외한 클래스 이름이다. 단 첫 알파벳은 소문자로 한다.
    -->
	  <context:component-scan base-package="step33.exam10"/>
	  
	  <!-- 그럼 @Autowired, @Value, @Resource 등의 애노테이션은 누가 처리하는가?
	  	   => component-scan 태그는 annotation-config 태그를 포함하고 있다.
	  	   => annotation-config 태그를 작성할 필요가 없다.
	   -->
	   
	  <!-- @Component, @Service, @Controller, @Repository의 차이점?
	  		 => 없다. 전부 객체를 자동 생성하는 것이다. 기능은 같다.
	  		 => 목적 
	  		    1) 클래스를 역할 별로 분류하는 것이다.
	  		    2) 개발자는 클래스의 역할을 직관적으로 이해할 수 있다.
	  		    3) 특정 역할의 클래스를 대상으로 별도의 작업을 수행할 수 있다. 
	  		 => 역할
	  		    @Component : 일반 객체
	  		    @Service : 비즈니스 로직을 수행하는 객체
	  		    @Controller : MVC 아키텍처에서 컨트롤러 역할을 수행하는 객체
	  		    @Repository : MVC 아키텍처에서 모델 역할을 수행하는 객체 (DAO)
	   --> 
</beans>










